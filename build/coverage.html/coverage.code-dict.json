{"/home/travis/build/npmtest/node-npmtest-sms/test.js":"/* istanbul instrument in package npmtest_sms */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sms/lib.npmtest_sms.js":"/* istanbul instrument in package npmtest_sms */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sms = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sms = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sms/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sms && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sms */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sms\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sms.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sms.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sms.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sms.__dirname + '/lib.npmtest_sms.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sms/node_modules/sms/index.js":"﻿var argv = require('optimist').argv;\nvar models = require('./lib/models');\nvar dirty = require('dirty');\nvar sms = require('./lib/sms');\n\nvar verbodeMode = argv.v || false;\nvar runDir = argv.d || process.cwd();\nvar config = require(runDir + '/config');\nvar db = dirty(runDir + '/messages.db');\n\nvar storedMessages = new models.Messages();\n\ndb.on('load', function() {\n\tstoredMessages = new models.Messages(db.get('messages') || []);\n});\n\nvar Library = {\n\n\tremoveMessagesFromGateway: function (callback) {\n\t\t//sms.deletesms(callback);\n\t},\n\n\tremoveMessagesFromDb: function (callback) {\n\t\t//not implemented yet\n\t},\n\n\treadMessagesFromDb: function (callback) {\n        if (storedMessages && storedMessages.length>0) {\n            callback(storedMessages);\n        } else {\n            db.on('load', function() {\n                storedMessages = new models.Messages(db.get('messages') || []);\n                callback(storedMessages);\n            });\n        }\n\t},\n\n    fetchMessagesFromGateway: function (callback) {\n\n        var getMessagesCallback = function(response){\n\n            var headers = new RegExp(config.messageSeparator,'g');\n            var matcher = response.match(headers);\n            var updatesFound = false;\n            if (matcher) {\n                for (var i=0; i<matcher.length; i++) {\n                    var message = {};\n\n                    // get header\n\n                    var header = new RegExp(config.messageSeparator,'g');\n                    header.exec(matcher[i]); //console.log(RegExp.$2);\n                    for (var index in config.separatorAttributes) {\n                        var attribute = config.separatorAttributes[index];\n                        var idx = new Number(index) + 1;\n                        message[attribute] = RegExp['$'+idx];\n                    }\n\n                    // get body\n\n                    var msgextract = response.split(matcher[i]);\n                    if (matcher[i+1]) {\n                        msgextract = msgextract[1].split(matcher[i+1]);\n                        msgextract = msgextract[0];\n                    } else {\n                        msgextract = msgextract[1];\n                    }\n\n                    var messageExp = new RegExp(config.bodyDefinition.replace(/\\\\r\\\\n/g,nl),'g');\n                    messageExp.exec(msgextract);\n                    for (var index in config.bodyAttributes) {\n                        var attribute = config.bodyAttributes[index];\n                        var idx = new Number(index) + 1;\n                        message[attribute] = RegExp['$'+idx];\n                    }\n                    message.hash = encode(message.sendDateStr + message.phoneNumber + 'smsd');\n\n                    var matchingMessages = storedMessages.where({hash: message.hash});\n                    if (_.isEmpty(matchingMessages)) {\n                        storedMessages.add(message);\n                    }\n                }\n            }\n\n            if (callback) {\n                callback(updatesFound);\n            }\n\n        };\n\n        sms.getsms(getMessagesCallback);\n\n    },\n\n\tregisterCommand: function (command, callback) {\n\t\tdb.on('load', function() {\n\t\t\tvar listener = db.get(\"listener\");\n\t\t\tlistener.push( command );\n\t\t\tdb.set(\"listener\", listener, function listenerSaved (){\n\t\t\t\tif (callback) {\n\t\t\t\t\tcallback();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t},\n\n\tsendMessage: function (messageObj) {\n        // messageObj has attributes: to (phone number), message (text), success (callback)\n\t\tsms.send({\n\t\t\tto: messageObj.to,       \t// Recipient Phone Number, lead by +49...\n\t\t\ttext: messageObj.message    // Text to send\n\t\t}, function(err, result) {\n\t\t\t// error message in String and result information in JSON\n\t\t\tif (err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t\tmessageObj.success(result);\n\t\t});\n\t}\n\n};\n\nmodule.exports = Library;\n","/home/travis/build/npmtest/node-npmtest-sms/node_modules/sms/lib/models.js":"﻿var Backbone = require('backbone');\nvar _ = require('underscore');\n\nvar Message = Backbone.Model.extend({\n\tdefaults: {\n\t\tmessageId: null,\n\t\tfolder: null,\n\t\tstorage: null,\n\t\tfolderName: null,\n\t\tsmsc: null,\n\t\tsendDateStr: null,\n\t\tencoding: null,\n\t\tphoneNumber: null,\n\t\tstatus: null,\n\t\tmessage: null,\n\t\thash: null\n\t}\n});\n\nvar Messages = Backbone.Collection.extend({\n\tmodel: Message\n});\n\nmodule.exports.Message = Message;\nmodule.exports.Messages = Messages;\n","/home/travis/build/npmtest/node-npmtest-sms/node_modules/sms/lib/sms.js":"var sys = require('util'),\r\n    childProcess = require('child_process'),\r\n    gammu;\r\n\r\nvar SMS = {\r\n\r\n    _command: function (cmd, callback) {\r\n        gammu = childProcess.exec(cmd, function (error, stdout, stderr) {\r\n            if (error) {\r\n                console.log(error.stack);\r\n                console.log('Error code: '+error.code);\r\n                console.log('Signal received: '+error.signal);\r\n            }\r\n            //console.log('Child Process STDOUT: '+stdout);\r\n            //console.log('Child Process STDERR: '+stderr);\r\n            if (callback) {\r\n    \t\t  callback(stdout);\r\n    \t    }\r\n        });\r\n        gammu.on('exit', function (code) {\r\n            sys.log('Child process exited with exit code ' + code);\r\n        });\r\n    },\r\n\r\n    identify: function (callback) {\r\n        this._command('gammu --identify', function(response){\r\n            if (callback) callback(response);\r\n        });\r\n    },\r\n\r\n    pin: function (pincode, callback) {\r\n        this._command('gammu --entersecuritycode PIN ' + pincode, function(response){\r\n            if (callback) callback(response);\r\n        });\r\n    },\r\n\r\n    send: function (input, callback) {\r\n//        this._command('echo \"' + input.text + '\" | gammu --sendsms TEXT ' + input.to, function(response){\r\n        this._command('gammu sendsms TEXT ' + input.to + ' -text \"' + input.text + '\"', function(response){\r\n            if (callback) callback(response);\r\n        });\r\n    },\r\n\r\n    getsms: function (callback) {\r\n        this._command('gammu --getallsms', function(response){\r\n\t        if (callback) callback(response);\r\n        });\r\n    },\r\n\r\n    deletesms: function (callback) {\r\n        this._command('gammu --deleteallsms', function(response){\r\n                if (callback) callback(response);\r\n        });\r\n    },\r\n\r\n    reset: function (callback) {\r\n        //this._command('gammu reset HARD', function(response){\r\n        //    if (callback) callback(response);\r\n        //});\r\n    }\r\n\r\n};\r\n\r\nmodule.exports = SMS;\r\n","/home/travis/build/npmtest/node-npmtest-sms/node_modules/sms/smsd.js":"﻿var argv = require('optimist').argv;\nvar sys = require('util');\nvar fs = require('fs');\nvar _ = require('underscore');\nvar dirty = require('dirty');\nvar sms = require('./lib/sms');\nvar models = require('./lib/models');\n\nvar verbodeMode = argv.v || false;\nvar runDir = argv.d || process.cwd();\nvar config = require(runDir + '/config');\nvar db = dirty(runDir + '/messages.db');\n\n/*\n\tSMSD can be called with an optional register parameter, that allows a script to register as a service that likes to be informed about incoming messages.\n\tAll registered services are called on updates.\n*/\n\nvar nl = (process.platform === 'win32' ? '\\r\\n' : '\\n');\n\nvar listener = [];\n\nstoredMessages = new models.Messages();\n\ndb.on('load', function() {\n\tlistener = db.get('listener') || [];\n\tstoredMessages = new models.Messages(db.get('messages') || []);\n//    db.forEach(function(key, val) { console.log('Found key: %s, val: %j', key, val); });\n\n\tif (argv.register) {\n\n\t\t// REGISTER LISTENER\n\n\t\tlistener.push( argv.register );\n\t\tdb.set(\"listener\", listener, function listenerSaved (){\n\t\t\tconsole.log(listener);\n\t\t});\n\t\n\t} else if (argv.read) {\n\n\t\t// READ DATASOURCE\n\n\t\t//process.stdout.write(JSON.stringify(db.get('messages')));\n\t\tprocess.stdout.write(JSON.stringify(storedMessages.toJSON()));\n\t\n\t} else if (argv.send) {\n\n\t\t// SEND MESSAGE\n\t\tif (argv.v) {\n\t\t\tsys.log(\"sending message...\");\n\t\t}\n\n\t\t// this is a workaround for bug in optimist, please give phone numbers by a leading plus sign including country code\n\t\tvar to = new String(argv.to);\n\t\tto = (to.indexOf('+') !== 0) ? '+' + to : to;\n\t\t\n\t\tsms.send({\n\t\t\tto: to || '',\n\t\t\ttext: argv.message || ''\n\t\t}, function messageSent (response) {\n\t\t\tif (argv.v) {\n\t\t\t\tconsole.log(response);\n\t\t\t}\n\t\t});\n\n\t} else {\n\n\t\t// START SMS READER\n\t\tgetMessagesFromGateway();\n\n\t}\n\n\n});\n\nfunction getMessagesFromGateway () {\n\tif (verbodeMode) {\n\t\tsys.log(\"fetch messages from gateway...\");\n\t}\n\trenderMessages(function(updatesFound){\n\t\tif (updatesFound) {\n\t\t\tif (verbodeMode) {\n\t\t\t\tsys.log(\"storing new messages...\");\n\t\t\t\tconsole.log(storedMessages.toJSON());\n\t\t\t}\n\t\t\tdb.set(\"messages\", storedMessages.toJSON(), function messagesSaved (){\n                //sms.deletesms(); // remove all messages\n\t\t\t\tlistener = db.get('listener') || []; // read from data source, as listener could have been added while running\n\t\t\t\tif (listener && listener.length>0) {\n\t\t\t\t\tfor (var i=0; i<listener.length; i++) {\n\t\t\t\t\t\tif (verbodeMode) {\n\t\t\t\t\t\t\tsys.log(\"call listener: \" + listener[i]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tsms._command(listener[i]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n\tsetTimeout(getMessagesFromGateway, config.timeout);\n}\n\nfunction renderMessages (callback) {\n\n\tvar getMessagesCallback = function(response){\n\n//\t\tif (verbodeMode) {\n//\t\t\tsys.log(response);\n//\t\t}\n\t\n\t\tvar pattern = config.patterns[config.patternLang];\n\t\n\t\tvar headers = new RegExp(pattern.messageSeparator,'g');\n\t\tvar matcher = response.match(headers);\n\t\tvar updatesFound = false;\n\t\tif (matcher) {\n\t\t\tfor (var i=0; i<matcher.length; i++) {\n\t\t\t\tvar message = {};\n\t\t\t\t\n\t\t\t\t// get header\n\t\t\t\t\n\t\t\t\tvar header = new RegExp(pattern.messageSeparator,'g');\n\t\t\t\theader.exec(matcher[i]); //console.log(RegExp.$2);\n\t\t\t\tfor (var index in pattern.separatorAttributes) {\n\t\t\t\t\tvar attribute = pattern.separatorAttributes[index];\n\t\t\t\t\tvar idx = new Number(index) + 1;\n\t\t\t\t\tmessage[attribute] = RegExp['$'+idx];\n\t\t\t\t}\n\n\t\t\t\t// get body\n\t\t\t\t\n\t\t\t\tvar msgextract = response.split(matcher[i]);\n\t\t\t\tif (matcher[i+1]) {\n\t\t\t\t\tmsgextract = msgextract[1].split(matcher[i+1]);\n\t\t\t\t\tmsgextract = msgextract[0];\n\t\t\t\t} else {\n\t\t\t\t\tmsgextract = msgextract[1];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar messageExp = new RegExp(pattern.bodyDefinition.replace(/\\\\r\\\\n/g,nl),'g');\n\t\t\t\tmessageExp.exec(msgextract);\n\t\t\t\tfor (var index in pattern.bodyAttributes) {\n\t\t\t\t\tvar attribute = pattern.bodyAttributes[index];\n\t\t\t\t\tvar idx = new Number(index) + 1;\n\t\t\t\t\tmessage[attribute] = RegExp['$'+idx];\n\t\t\t\t}\n\t\t\t\tmessage.hash = encode(message.sendDateStr + message.phoneNumber + 'smsd');\n\n\t\t\t\tvar matchingMessages = storedMessages.where({hash: message.hash});\n\t\t\t\tif (_.isEmpty(matchingMessages)) {\n\t\t\t\t\tupdatesFound = true;\n\t\t\t\t\tstoredMessages.add(message);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (callback) {\n\t\t\tcallback(updatesFound);\n\t\t}\n\n\t};\n\n\tif (argv.simulate) {\n\t\tfs.readFile(argv.simulate, 'utf8', function (error, response) {\n\t\t\tgetMessagesCallback(response);\n\t\t});\n\t} else {\n\t\tsms.getsms(getMessagesCallback);\n\t}\n\n}\n\nfunction encode (txt) {\n    return new Buffer(txt).toString('base64');\n}\n\nfunction decode (txt) {\n    return new Buffer(txt, 'base64').toString('utf8');\n}\n"}